import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTelegram } from '../hooks/useTelegram';
import { useUserStore } from '../store';
import { navigateToGame } from '../utils/navigation';
import { fetchClubs } from '../api';

const players = Array.from({ length: 20 }, (_, i) => i + 1);

const categories = [
	{ name: 'goat', color: '#0EA94B', slots: 2 },
	{ name: '–•–æ—Ä–æ—à', color: '#94CC7A', slots: 6 },
	{ name: '–Ω–æ—Ä–º', color: '#E6A324', slots: 6 },
	{ name: '–ë–µ–∑–¥–∞—Ä—å', color: '#E13826', slots: 6 },
];

const Guide = () => {
	const [nextStep, setNextStep] = useState(false);
	const [isLoading, setIsLoading] = useState(false);
	const [showNoClubsMessage, setShowNoClubsMessage] = useState(false);
	const navigate = useNavigate();
	const { initData } = useTelegram();
	const { isAdmin } = useUserStore();

	const handleStartGame = async () => {
		if (!initData) {
			console.error('–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
			return;
		}

		setIsLoading(true);
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –∏–≥—Ä–µ
			const clubs = await fetchClubs(initData);

			if (clubs.length === 0) {
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–º–∞–Ω–¥
				setShowNoClubsMessage(true);
				return;
			}

			// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
			await navigateToGame(initData, navigate);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥:', error);
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			setShowNoClubsMessage(true);
		} finally {
			setIsLoading(false);
		}
	};

	const handleGoToAdmin = () => {
		navigate('/admin');
	};

	const handleCreateFirstClub = () => {
		navigate('/admin/add-club');
	};

	return (
		<div className='container flex flex-col justify-around h-full'>
			{!nextStep && (
				<>
					<div className='guide_item'>
						<h2 className='text-[clamp(2rem,7vw,3rem)] text-center font-bold mb-4'>
							–ü–æ–∫–∞–∂–µ–º 20 –∏–≥—Ä–æ–∫–æ–≤
						</h2>
						<div className='player_list grid grid-cols-10 gap-1'>
							{players.map((num) => (
								<div
									className='player_item flex items-center justify-center text-[clamp(1.5rem,4vw,2.5rem)] font-bold rounded-lg'
									style={{
										background: '#FFEC13',
										color: '#EC3381',
									}}
									key={`player-${num}`}
								>
									<p>{num}</p>
								</div>
							))}
						</div>
					</div>
					<div className='guide_item'>
						<h2 className='text-[clamp(2rem,7vw,3rem)] text-center font-bold mb-4'>
							–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏—Ö –ø–æ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
						</h2>
						<ul className='category_list text-center flex flex-col gap-2'>
							{categories.map((category) => (
								<li
									key={`category-${category.name}`}
									className='category_item text-[clamp(1.5rem,4vw,2rem)] font-bold rounded-lg text-white uppercase py-[clamp(0.5rem,1.5vh,1.5rem)]'
									style={{
										backgroundColor: category.color,
									}}
								>
									<p>{category.name}</p>
								</li>
							))}
						</ul>
					</div>
				</>
			)}
			{nextStep && (
				<>
					<div className='guide_item'>
						<h2 className='text-[clamp(2rem,7vw,3rem)] text-center font-bold mb-4'>
							–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
						</h2>
						<ul className='category_list flex flex-col gap-2'>
							{categories.map((category) => (
								<li
									key={`category-${category.name}`}
									className='category_item rounded-lg py-[clamp(0.5rem,1vh,1rem)] flex px-[clamp(0.5rem,2vw,2rem)] justify-between items-center'
									style={{
										backgroundColor: category.color,
									}}
								>
									<p className='category_name text-[clamp(1rem,5vw,3rem)] font-bold text-white text-left uppercase '>
										{category.name}
									</p>
									<ul className='player_list grid grid-cols-6 gap-2 items-center'>
										{Array.from(
											{ length: category.slots },
											(_, i) => i + 1,
										).map((num) => (
											<li
												className='player_item flex items-center justify-center text-[clamp(1.5rem,4vw,2.5rem)] font-bold rounded-lg w-[clamp(2rem,4vw,3rem)] h-[clamp(2rem,4vh,4rem)]'
												style={{
													background: '#FFEC13',
													color: '#EC3381',
												}}
												key={`slot-${num}`}
											>
												{num}
											</li>
										))}
									</ul>
								</li>
							))}
						</ul>
					</div>
					<div className='guide_item'>
						<h2 className='text-[clamp(2rem,7vw,3rem)] text-center font-bold'>
							–ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ ‚Äî –∑–∞–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é
							–∫–∞—Ç–µ–≥–æ—Ä–∏—é
						</h2>
					</div>
				</>
			)}
			{!nextStep && (
				<div className='guide_btns flex gap-3 items-center'>
					{isAdmin && (
						<button
							onClick={handleGoToAdmin}
							className='link_btn text-[clamp(1rem,2vh,1.5rem)] py-[clamp(0.5rem,2vh,1rem)] border-2 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity hover:opacity-80'
							style={{
								background: '#EC3381',
								color: '#fff',
								borderColor: '#EC3381',
							}}
						>
							üë§ –ê–¥–º–∏–Ω
						</button>
					)}
					<button
						className='link_btn text-[clamp(1rem,2vh,1.5rem)] py-[clamp(0.5rem,2vh,1rem)] border-2 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity hover:opacity-80'
						style={{
							background: '#EC3381',
							color: '#fff',
							borderColor: '#EC3381',
						}}
						onClick={() => setNextStep(true)}
					>
						–î–∞–ª—å—à–µ
					</button>
				</div>
			)}
			{nextStep && (
				<div className='guide_btns flex gap-3 items-center'>
					<button
						className='link_btn text-[clamp(1rem,2vh,1.5rem)] py-[clamp(0.5rem,2vh,1rem)] border-2 transition-opacity hover:opacity-80'
						style={{
							color: '#EC3381',
							borderColor: '#EC3381',
							background: 'transparent',
						}}
						onClick={() => setNextStep(false)}
					>
						–ù–∞–∑–∞–¥
					</button>
					<button
						onClick={handleStartGame}
						disabled={isLoading}
						className='link_btn text-[clamp(1rem,2vh,1.5rem)] py-[clamp(0.5rem,2vh,1rem)] border-2 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity hover:opacity-80'
						style={{
							background: '#EC3381',
							color: '#fff',
							borderColor: '#EC3381',
						}}
					>
						{isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'}
					</button>
				</div>
			)}

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–º–∞–Ω–¥ */}
			{showNoClubsMessage && (
				<div
					className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'
					onClick={() => setShowNoClubsMessage(false)}
				>
					<div
						className='rounded-lg p-6 max-w-sm w-full'
						style={{
							background: 'var(--tg-theme-bg-color)',
							color: 'var(--tg-theme-text-color)',
						}}
						onClick={(e) => e.stopPropagation()}
					>
						<h3 className='text-xl font-bold mb-4 text-center'>
							–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
						</h3>
						<p
							className='text-center mb-6'
							style={{ color: 'var(--tg-theme-hint-color)' }}
						>
							{isAdmin
								? '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É —Å –∏–≥—Ä–æ–∫–∞–º–∏.'
								: '–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.'}
						</p>

						<div className='flex flex-col gap-3'>
							{isAdmin && (
								<button
									onClick={handleCreateFirstClub}
									className='py-3 rounded-lg text-lg font-medium w-full transition-opacity hover:opacity-80'
									style={{
										background: 'var(--tg-theme-button-color)',
										color: 'var(--tg-theme-button-text-color)',
									}}
								>
									–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
								</button>
							)}
							<button
								onClick={() => setShowNoClubsMessage(false)}
								className='py-3 rounded-lg text-lg font-medium w-full transition-opacity hover:opacity-80'
								style={{
									background: 'var(--tg-theme-secondary-bg-color)',
									color: 'var(--tg-theme-text-color)',
								}}
							>
								–ó–∞–∫—Ä—ã—Ç—å
							</button>
						</div>
					</div>
				</div>
			)}
		</div>
	);
};

export default Guide;
