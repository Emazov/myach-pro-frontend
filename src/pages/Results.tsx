import { useState, useEffect } from 'react';
import { useGameStore, useUserStore } from '../store';
import { CategoryItem, LoadingSpinner } from '../components';
import {
	fetchClubs,
	shareResults,
	previewResultsImage,
	type ShareData,
} from '../api';
import { useTelegram } from '../hooks/useTelegram';
import { getProxyImageUrl } from '../utils/imageUtils';
import { completeGameSession } from '../api/analyticsService';
import { Link } from 'react-router-dom';

// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

const Results = () => {
	const { initData, tg } = useTelegram();
	const { isAdmin } = useUserStore();
	const { categorizedPlayers, categories } = useGameStore();
	const [club, setClub] = useState<any>(null);
	const [isLoading, setIsLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);
	const [isSharing, setIsSharing] = useState(false);
	const [showShareModal, setShowShareModal] = useState(false);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
	const hasGameData =
		categories.length > 0 &&
		Object.keys(categorizedPlayers).length > 0 &&
		Object.values(categorizedPlayers).some((players) => players.length > 0);

	useEffect(() => {
		const loadClub = async () => {
			if (!initData) {
				setError('–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
				setIsLoading(false);
				return;
			}

			try {
				const clubs = await fetchClubs(initData);
				if (clubs && clubs.length > 0) {
					setClub(clubs[0]);
				} else {
					setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ');
				}

				// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
				if (hasGameData) {
					completeGameSession(initData).catch((error) => {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
					});
				}
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—É–±–µ:', err);
				setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—É–±–µ');
			} finally {
				setIsLoading(false);
			}
		};

		loadClub();
	}, [initData, hasGameData]);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
	const handleShare = async () => {
		if (!initData || !club || !hasGameData) {
			alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Share API
		if ('share' in navigator) {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —à–∞—Ä–∏–Ω–≥–∞
			setShowShareModal(true);
		} else {
			// –ï—Å–ª–∏ Web Share API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
			await handleTelegramShare();
		}
	};

	// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à–∞—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Web Share API
	const handleWebShare = async () => {
		setIsSharing(true);

		try {
			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º categorizedPlayers –≤ categorizedPlayerIds (—Ç–æ–ª—å–∫–æ IDs)
			const categorizedPlayerIds: { [categoryName: string]: string[] } = {};

			Object.entries(categorizedPlayers).forEach(([categoryName, players]) => {
				categorizedPlayerIds[categoryName] = players.map((player) => player.id);
			});

			const shareData: ShareData = {
				categorizedPlayerIds,
				categories,
				clubId: club.id,
			};

			// –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Blob –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
			const imageBlob = await previewResultsImage(shareData);

			// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏–∑ Blob
			const imageFile = new File([imageBlob], `tier-list-${club.name}.jpg`, {
				type: 'image/jpeg',
			});

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
			const shareText = generateShareText();

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Share API
			await navigator.share({
				title: `üèÜ –¢–∏—Ä-–ª–∏—Å—Ç "${club.name}"`,
				text: shareText,
				files: [imageFile],
			});

			console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ Web Share API');
		} catch (error: any) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ —á–µ—Ä–µ–∑ Web Share API:', error);

			// –ï—Å–ª–∏ Web Share API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback –Ω–∞ Telegram
			if (error.name === 'AbortError') {
				console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —à–∞—Ä–∏–Ω–≥');
				return;
			}

			// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
			const fallbackChoice = confirm(
				'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram?',
			);
			if (fallbackChoice) {
				await handleTelegramShare();
			}
		} finally {
			setIsSharing(false);
		}
	};

	// –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
	const handleTelegramShare = async () => {
		setIsSharing(true);

		try {
			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º categorizedPlayers –≤ categorizedPlayerIds (—Ç–æ–ª—å–∫–æ IDs)
			const categorizedPlayerIds: { [categoryName: string]: string[] } = {};

			Object.entries(categorizedPlayers).forEach(([categoryName, players]) => {
				categorizedPlayerIds[categoryName] = players.map((player) => player.id);
			});

			const shareData: ShareData = {
				categorizedPlayerIds,
				categories,
				clubId: club.id, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∫–ª—É–±–∞
			};

			const result = await shareResults(initData, shareData);

			if (result.success) {
				// –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∏–ª –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
				if (result.closeWebApp && tg) {
					tg.close();
				}
			}
		} catch (error: any) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
			alert(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
		} finally {
			setIsSharing(false);
		}
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
	const generateShareText = (): string => {
		let text = `üèÜ –¢–ò–†-–õ–ò–°–¢ "${club.name.toUpperCase()}"\n\n`;

		categories.forEach((category) => {
			const players = categorizedPlayers[category.name] || [];
			text += `${category.name.toUpperCase()} (${players.length}/${
				category.slots
			}):\n`;

			if (players.length > 0) {
				players.forEach((player, index) => {
					text += `${index + 1}. ${player.name}\n`;
				});
			} else {
				text += '‚Äî –ü—É—Å—Ç–æ\n';
			}
			text += '\n';
		});

		text += '‚öΩ –°–æ–∑–¥–∞–Ω–æ –≤ @myach_pro_bot';
		return text;
	};

	// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —à–∞—Ä–∏–Ω–≥–∞
	const handleWebShareChoice = async () => {
		setShowShareModal(false);
		await handleWebShare();
	};

	const handleTelegramShareChoice = async () => {
		setShowShareModal(false);
		await handleTelegramShare();
	};

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
	if (isLoading) {
		return <LoadingSpinner fullScreen message='–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...' />;
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
	if (error || !club) {
		return (
			<div
				className='min-h-screen flex flex-col items-center justify-center p-4'
				style={{
					background: 'var(--tg-theme-bg-color)',
					color: 'var(--tg-theme-text-color)',
				}}
			>
				<div className='text-center max-w-md'>
					<h2 className='text-2xl font-bold mb-4 text-red-500'>
						{error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö'}
					</h2>
					<button
						className='py-3 px-6 rounded-lg font-medium transition-opacity hover:opacity-80'
						style={{
							background: 'var(--tg-theme-button-color)',
							color: 'var(--tg-theme-button-text-color)',
						}}
						onClick={() => window.location.reload()}
					>
						–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
					</button>
				</div>
			</div>
		);
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
	if (!hasGameData) {
		return (
			<div
				className='min-h-screen flex flex-col items-center justify-center p-4'
				style={{
					background: 'var(--tg-theme-bg-color)',
					color: 'var(--tg-theme-text-color)',
				}}
			>
				<div className='text-center max-w-md'>
					<h2 className='text-2xl font-bold mb-4'>
						–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
					</h2>
					<p className='text-lg mb-6'>
						–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
					</p>
					<button
						className='py-3 px-6 rounded-lg font-medium transition-opacity hover:opacity-80'
						style={{
							background: 'var(--tg-theme-button-color)',
							color: 'var(--tg-theme-button-text-color)',
						}}
						onClick={() => window.history.back()}
					>
						–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
					</button>
				</div>
			</div>
		);
	}

	return (
		<div className='min-h-screen bg-[url("/main_bg.jpg")] flex flex-col'>
			<div className='flex-1 flex flex-col'>
				{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º—è—á–æ–º */}
				<div className='flex items-center justify-center gap-3'>
					<img
						src='./main_logo.png'
						alt='main_logo'
						className='w-40 object-contain'
						loading='eager'
					/>
				</div>

				{/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
				<div className='bg-[var(--tg-theme-bg-color)] flex-1 rounded-t-3xl px-4 pt-6 '>
					{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏—Ä-–ª–∏—Å—Ç–∞ –∏ –ª–æ–≥–æ—Ç–∏–ø */}
					<div className='flex items-center justify-center gap-2 mb-6'>
						<div className='flex items-center gap-2'>
							<img
								src={getProxyImageUrl(club.img_url)}
								alt={club.name}
								className='w-12 object-contain rounded'
								loading='eager'
								onError={(e) => {
									// –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Å–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
									const target = e.target as HTMLImageElement;
									target.style.display = 'none';
								}}
							/>
							<span className='text-[clamp(2rem,4vw,4rem)] font-bold'>
								{club.name}
							</span>
						</div>
					</div>

					{/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
					<ul className='category_list flex flex-col gap-3 mb-6'>
						{categories.map((category) => {
							const players = categorizedPlayers[category.name] || [];
							return (
								<CategoryItem
									key={`category-${category.name}`}
									category={category}
									players={players}
									showPlayerImages={true}
									showSkeletons={true}
								/>
							);
						})}
					</ul>
					{/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è */}
					<div className='flex flex-col items-center justify-center gap-2'>
						<button
							className='bg-[#FFEC13] text-black font-bold py-3 px-8 rounded-lg text-lg w-fit disabled:opacity-50 disabled:cursor-not-allowed'
							onClick={handleShare}
							disabled={isSharing}
						>
							{isSharing ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'}
						</button>
						{isAdmin && (
							<Link
								to='/admin'
								className='inline-block bg-[#FFEC13] text-black font-bold py-3 px-8 rounded-lg text-lg w-fit'
							>
								–ê–¥–º–∏–Ω
							</Link>
						)}
					</div>
				</div>
			</div>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —à–∞—Ä–∏–Ω–≥–∞ */}
			{showShareModal && (
				<div className='fixed inset-0 flex items-center justify-center z-50 bg-black/50'>
					<div className='bg-white rounded-lg p-6 w-full max-w-sm mx-4'>
						<h3 className='text-lg font-bold text-center mb-4 text-black'>
							–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
						</h3>
						<p className='text-sm text-gray-600 text-center mb-6'>
							–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏
						</p>

						<div className='flex flex-col gap-3'>
							<button
								onClick={handleWebShareChoice}
								disabled={isSharing}
								className='flex items-center justify-center gap-2 bg-[#0088cc] text-white font-bold py-3 px-4 rounded-lg text-lg transition-opacity hover:opacity-90 disabled:opacity-50'
							>
								üì± –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ —à–∞—Ä–∏–Ω–≥–∞
							</button>
							<button
								onClick={handleTelegramShareChoice}
								disabled={isSharing}
								className='flex items-center justify-center gap-2 bg-[#EC3381] text-white font-bold py-3 px-4 rounded-lg text-lg transition-opacity hover:opacity-90 disabled:opacity-50'
							>
								‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
							</button>
							<button
								onClick={() => setShowShareModal(false)}
								disabled={isSharing}
								className='text-gray-500 py-2 text-sm transition-opacity hover:opacity-70 disabled:opacity-50'
							>
								–û—Ç–º–µ–Ω–∞
							</button>
						</div>
					</div>
				</div>
			)}
		</div>
	);
};

export default Results;
